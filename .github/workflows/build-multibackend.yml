name: Build Multi-Backend

on:
    push:
        branches: [main, develop, master]
    pull_request:
        branches: [main]
    workflow_dispatch:

env:
    BUILD_TYPE: Release

jobs:
    # ============================================================================
    # CPU Builds (All Platforms)
    # ============================================================================

    build-cpu-linux:
        name: CPU - Linux x64
        runs-on: ubuntu-22.04

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install Dependencies
              run: |
                  sudo apt update
                  sudo apt install -y cmake build-essential

            - name: Configure CMake
              run: |
                  cmake -B build \
                    -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                    -DBUILD_SHARED_LIBS=ON \
                    -DLLAMA_BUILD_TESTS=OFF \
                    -DLLAMA_BUILD_EXAMPLES=OFF \
                    -DLLAMA_BUILD_SERVER=OFF \
                    -DGGML_BUILD_TESTS=OFF \
                    -DGGML_BUILD_EXAMPLES=OFF \
                    -DLLAMA_CURL=OFF \
                    -DGGML_NATIVE=ON

            - name: Build
              run: cmake --build build -j$(nproc)

            - name: Strip Binaries
              run: |
                  strip --strip-unneeded build/bin/*.so
                  ls -lh build/bin/

            - name: Run Tests
              run: |
                  ./build/bin/llama-bench --help

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-cpu-linux-x64
                  path: |
                      build/bin/libggml-cpu.so
                      build/bin/libggml-base.so
                      build/bin/libllama.so
                  retention-days: 90

    build-cpu-windows:
        name: CPU - Windows x64
        runs-on: windows-2022

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure CMake
              run: |
                  cmake -B build `
                    -G "Visual Studio 17 2022" `
                    -A x64 `
                    -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE `
                    -DBUILD_SHARED_LIBS=ON `
                    -DLLAMA_BUILD_TESTS=OFF `
                    -DLLAMA_BUILD_EXAMPLES=OFF `
                    -DLLAMA_BUILD_SERVER=OFF `
                    -DGGML_BUILD_TESTS=OFF `
                    -DGGML_BUILD_EXAMPLES=OFF `
                    -DLLAMA_CURL=OFF

            - name: Build
              run: cmake --build build --config $env:BUILD_TYPE -j

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-cpu-win-x64
                  path: |
                      build/bin/Release/*.dll
                  retention-days: 90

    build-cpu-macos:
        name: CPU - macOS ARM64
        runs-on: macos-14

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure CMake
              run: |
                  cmake -B build \
                    -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                    -DBUILD_SHARED_LIBS=ON \
                    -DLLAMA_BUILD_TESTS=OFF \
                    -DLLAMA_BUILD_EXAMPLES=OFF \
                    -DLLAMA_BUILD_SERVER=OFF \
                    -DGGML_BUILD_TESTS=OFF \
                    -DGGML_BUILD_EXAMPLES=OFF \
                    -DLLAMA_CURL=OFF \
                    -DGGML_NATIVE=ON

            - name: Build
              run: cmake --build build -j$(sysctl -n hw.ncpu)

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-cpu-osx-arm64
                  path: |
                      build/bin/*.dylib
                  retention-days: 90

    # ============================================================================
    # Metal Build (macOS ARM64)
    # ============================================================================

    build-metal-macos:
        name: Metal - macOS ARM64
        runs-on: macos-14

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure CMake
              run: |
                  cmake -B build-metal \
                    -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                    -DBUILD_SHARED_LIBS=ON \
                    -DLLAMA_BUILD_TESTS=OFF \
                    -DLLAMA_BUILD_EXAMPLES=OFF \
                    -DLLAMA_BUILD_SERVER=OFF \
                    -DGGML_BUILD_TESTS=OFF \
                    -DGGML_BUILD_EXAMPLES=OFF \
                    -DGGML_METAL=ON \
                    -DLLAMA_CURL=OFF

            - name: Build
              run: cmake --build build-metal -j$(sysctl -n hw.ncpu)

            - name: Verify Metal Library
              run: |
                  ls -lh build-metal/bin/
                  file build-metal/bin/libggml-metal.dylib || echo "Metal library built"

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-metal-osx-arm64
                  path: |
                      build-metal/bin/*.dylib
                      build-metal/bin/*.metal
                  retention-days: 90

    # ============================================================================
    # CUDA Builds (Self-Hosted GPU Runners)
    # ============================================================================

    build-cuda-linux:
        name: CUDA - Linux x64
        runs-on:
            group: linux64-gpu

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Verify CUDA
              run: |
                  nvcc --version
                  nvidia-smi

            - name: Configure CMake
              env:
                  CC: gcc-12
                  CXX: g++-12
                  CUDAHOSTCXX: g++-12
              run: |
                  cmake -B build-cuda \
                    -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                    -DBUILD_SHARED_LIBS=ON \
                    -DLLAMA_BUILD_TESTS=OFF \
                    -DLLAMA_BUILD_EXAMPLES=OFF \
                    -DLLAMA_BUILD_SERVER=OFF \
                    -DGGML_BUILD_TESTS=OFF \
                    -DGGML_BUILD_EXAMPLES=OFF \
                    -DGGML_CUDA=ON \
                    -DLLAMA_CURL=OFF \
                    -DCMAKE_CUDA_ARCHITECTURES="61;70;75;80;86;89;90" \
                    -DCMAKE_C_FLAGS="-Os" \
                    -DCMAKE_CXX_FLAGS="-Os"

            - name: Build
              run: cmake --build build-cuda -j$(nproc)

            - name: Strip Binaries
              run: |
                  strip --strip-unneeded build-cuda/bin/libggml-cuda.so
                  ls -lh build-cuda/bin/

            - name: Run Tests
              run: |
                  ./build-cuda/bin/llama-bench --help

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-cuda-linux-x64
                  path: |
                      build-cuda/bin/libggml-cuda.so
                      build-cuda/bin/libggml-cpu.so
                      build-cuda/bin/libggml-base.so
                      build-cuda/bin/libllama.so
                  retention-days: 90

    build-cuda-windows:
        name: CUDA - Windows x64
        runs-on:
            group: win64-gpu

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Environment
              shell: cmd
              run: |
                  set "PATH=C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin;%PATH%"
                  set "PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\bin;%PATH%"
                  set "PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\libnvvp;%PATH%"
                  set "PATH=C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\bin\Hostx64\x64;%PATH%"
                  set "PATH=C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin;%PATH%"
                  echo PATH=%PATH%>> %GITHUB_ENV%

            - name: Verify CUDA
              shell: cmd
              run: |
                  nvcc --version
                  nvidia-smi

            - name: Configure CMake
              shell: cmd
              run: cmake -B build-cuda -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DLLAMA_BUILD_TESTS=OFF -DLLAMA_BUILD_EXAMPLES=OFF -DLLAMA_BUILD_SERVER=OFF -DGGML_BUILD_TESTS=OFF -DGGML_BUILD_EXAMPLES=OFF -DGGML_CUDA=ON -DLLAMA_CURL=OFF -DCMAKE_CUDA_ARCHITECTURES="61;70;75;80;86;89;90"

            - name: Build
              shell: cmd
              run: cmake --build build-cuda --config Release -j

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-cuda-win-x64
                  path: |
                      build-cuda/bin/Release/*.dll
                  retention-days: 90

    # ============================================================================
    # Vulkan Builds (GitHub-Hosted Runners)
    # ============================================================================

    build-vulkan-linux:
        name: Vulkan - Linux x64
        runs-on: ubuntu-22.04

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install Vulkan Dependencies
              run: |
                  sudo apt update
                  sudo apt install -y libvulkan-dev vulkan-tools wget

                  # Download and install Vulkan SDK for glslc and shaderc
                  wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
                  sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
                  sudo apt update
                  sudo apt install -y vulkan-sdk

            - name: Verify Vulkan
              run: |
                  which glslc
                  glslc --version
                  vulkaninfo --summary || echo "vulkaninfo requires GPU runtime"

            - name: Configure CMake
              run: |
                  cmake -B build-vulkan \
                    -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                    -DBUILD_SHARED_LIBS=ON \
                    -DLLAMA_BUILD_TESTS=OFF \
                    -DLLAMA_BUILD_EXAMPLES=OFF \
                    -DLLAMA_BUILD_SERVER=OFF \
                    -DGGML_BUILD_TESTS=OFF \
                    -DGGML_BUILD_EXAMPLES=OFF \
                    -DGGML_VULKAN=ON \
                    -DLLAMA_CURL=OFF \
                    -DCMAKE_C_FLAGS="-Os" \
                    -DCMAKE_CXX_FLAGS="-Os"

            - name: Build
              run: cmake --build build-vulkan -j$(nproc)

            - name: Verify Library Size
              run: |
                  ls -lh build-vulkan/bin/
                  # Expected: ~38 MB (30 MB shaders + 5 MB symbols + 3 MB runtime)

            - name: Run Tests
              run: |
                  ./build-vulkan/bin/llama-bench --help || echo "llama-bench not critical for library"

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-vulkan-linux-x64
                  path: |
                      build-vulkan/bin/libggml-vulkan.so
                      build-vulkan/bin/libggml-cpu.so
                      build-vulkan/bin/libggml-base.so
                      build-vulkan/bin/libllama.so
                  retention-days: 90

    build-vulkan-windows:
        name: Vulkan - Windows x64
        runs-on: windows-2022

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Cache Vulkan SDK
              id: cache-vulkan
              uses: actions/cache@v4
              with:
                  path: C:\VulkanSDK\1.3.275.0
                  key: vulkan-sdk-1.3.275.0-windows

            - name: Install Vulkan SDK
              if: steps.cache-vulkan.outputs.cache-hit != 'true'
              run: |
                  echo "Downloading Vulkan SDK..."
                  curl -L -o VulkanSDK.exe "https://sdk.lunarg.com/sdk/download/1.3.275.0/windows/VulkanSDK-1.3.275.0-Installer.exe"
                  if not exist VulkanSDK.exe (
                      echo "Download failed"
                      exit /b 1
                  )
                  echo "Installing Vulkan SDK..."
                  start /wait VulkanSDK.exe /S
                  if not exist "C:\VulkanSDK\1.3.275.0" (
                      echo "Installation failed"
                      exit /b 1
                  )
                  echo "Vulkan SDK installation complete"
              shell: cmd

            - name: Setup Vulkan Environment
              shell: cmd
              run: |
                  set "VULKAN_SDK=C:\VulkanSDK\1.3.275.0"
                  echo VULKAN_SDK=%VULKAN_SDK%>> %GITHUB_ENV%
                  echo %VULKAN_SDK%\Bin>> %GITHUB_PATH%

            - name: Verify Vulkan
              shell: cmd
              run: glslc --version

            - name: Configure CMake
              shell: cmd
              run: cmake -B build-vulkan -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DLLAMA_BUILD_TESTS=OFF -DLLAMA_BUILD_EXAMPLES=OFF -DLLAMA_BUILD_SERVER=OFF -DGGML_BUILD_TESTS=OFF -DGGML_BUILD_EXAMPLES=OFF -DGGML_VULKAN=ON -DLLAMA_CURL=OFF

            - name: Build
              shell: cmd
              run: cmake --build build-vulkan --config Release -j

            - name: Verify Library Size
              shell: cmd
              run: dir /s build-vulkan\bin\Release\

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-vulkan-win-x64
                  path: |
                      build-vulkan/bin/Release/*.dll
                  retention-days: 90

    # ============================================================================
    # OpenCL Builds (All Platforms)
    # ============================================================================

    build-opencl-linux:
        name: OpenCL - Linux x64
        runs-on: ubuntu-22.04

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install OpenCL Dependencies
              run: |
                  sudo apt update
                  sudo apt install -y \
                    opencl-headers \
                    ocl-icd-opencl-dev \
                    clinfo

            - name: Configure CMake
              run: |
                  cmake -B build-opencl \
                    -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                    -DBUILD_SHARED_LIBS=ON \
                    -DLLAMA_BUILD_TESTS=OFF \
                    -DLLAMA_BUILD_EXAMPLES=OFF \
                    -DLLAMA_BUILD_SERVER=OFF \
                    -DGGML_BUILD_TESTS=OFF \
                    -DGGML_BUILD_EXAMPLES=OFF \
                    -DGGML_OPENCL=ON \
                    -DLLAMA_CURL=OFF \
                    -DCMAKE_C_FLAGS="-Os" \
                    -DCMAKE_CXX_FLAGS="-Os"

            - name: Build
              run: cmake --build build-opencl -j$(nproc)

            - name: Strip Binaries
              run: |
                  strip --strip-unneeded build-opencl/bin/libggml-opencl.so
                  ls -lh build-opencl/bin/

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-opencl-linux-x64
                  path: |
                      build-opencl/bin/libggml-opencl.so
                      build-opencl/bin/libggml-cpu.so
                      build-opencl/bin/libggml-base.so
                      build-opencl/bin/libllama.so
                  retention-days: 90

    build-opencl-windows:
        name: OpenCL - Windows x64
        runs-on: windows-2022

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install OpenCL SDK
              shell: cmd
              run: |
                  git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
                  cd C:\vcpkg
                  call bootstrap-vcpkg.bat
                  vcpkg integrate install
                  vcpkg install opencl:x64-windows
                  echo VCPKG_ROOT=C:\vcpkg>> %GITHUB_ENV%

            - name: Configure CMake
              shell: cmd
              run: cmake -B build-opencl -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DLLAMA_BUILD_TESTS=OFF -DLLAMA_BUILD_EXAMPLES=OFF -DLLAMA_BUILD_SERVER=OFF -DGGML_BUILD_TESTS=OFF -DGGML_BUILD_EXAMPLES=OFF -DGGML_OPENCL=ON -DLLAMA_CURL=OFF -DCMAKE_TOOLCHAIN_FILE="C:\vcpkg\scripts\buildsystems\vcpkg.cmake"

            - name: Build
              shell: cmd
              run: cmake --build build-opencl --config Release -j

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-opencl-win-x64
                  path: |
                      build-opencl/bin/Release/*.dll
                  retention-days: 90

    # ============================================================================
    # Package Universal Build (All Backends)
    # ============================================================================

    package-universal-linux:
        name: Package Universal Build - Linux
        needs:
            - build-cpu-linux
            - build-vulkan-linux
            - build-opencl-linux
        runs-on: ubuntu-22.04

        steps:
            - name: Download All Artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Create Package Structure
              run: |
                  mkdir -p universal/runtimes/linux-x64/native

                  # Copy CPU backend (base)
                  cp artifacts/ggufx-cpu-linux-x64/libllama.so universal/runtimes/linux-x64/native/
                  cp artifacts/ggufx-cpu-linux-x64/libggml-base.so universal/runtimes/linux-x64/native/
                  cp artifacts/ggufx-cpu-linux-x64/libggml-cpu.so universal/runtimes/linux-x64/native/

                  # Copy Vulkan backend
                  cp artifacts/ggufx-vulkan-linux-x64/libggml-vulkan.so universal/runtimes/linux-x64/native/ || echo "Vulkan build optional"

                  # Copy OpenCL backend
                  cp artifacts/ggufx-opencl-linux-x64/libggml-opencl.so universal/runtimes/linux-x64/native/ || echo "OpenCL build optional"

            - name: Show Package Contents
              run: |
                  ls -lh universal/runtimes/linux-x64/native/
                  du -sh universal/runtimes/linux-x64/native/

            - name: Create Checksums
              run: |
                  cd universal/runtimes/linux-x64/native
                  sha256sum *.so > checksums.txt
                  cat checksums.txt

            - name: Upload Universal Package
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-universal-linux-x64
                  path: universal/
                  retention-days: 90

    package-universal-windows:
        name: Package Universal Build - Windows
        needs:
            - build-cpu-windows
            - build-vulkan-windows
            - build-opencl-windows
        runs-on: windows-2022

        steps:
            - name: Download All Artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Create Package Structure
              shell: cmd
              run: |
                  mkdir universal\runtimes\win-x64\native
                  copy artifacts\ggufx-cpu-win-x64\*.dll universal\runtimes\win-x64\native\
                  copy artifacts\ggufx-vulkan-win-x64\*.dll universal\runtimes\win-x64\native\ 2>nul || echo "Vulkan artifacts not found (optional)"
                  copy artifacts\ggufx-opencl-win-x64\*.dll universal\runtimes\win-x64\native\ 2>nul || echo "OpenCL artifacts not found (optional)"

            - name: Show Package Contents
              shell: cmd
              run: dir /s universal\runtimes\win-x64\native\

            - name: Create Checksums
              shell: cmd
              run: |
                  cd universal\runtimes\win-x64\native
                  for %%f in (*.dll) do certutil -hashfile "%%f" SHA256 | find /v ":" >> checksums.txt
                  type checksums.txt

            - name: Upload Universal Package
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-universal-win-x64
                  path: universal/
                  retention-days: 90

    package-universal-macos:
        name: Package Universal Build - macOS
        needs:
            - build-cpu-macos
            - build-metal-macos
        runs-on: macos-14

        steps:
            - name: Download All Artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Create Package Structure
              run: |
                  mkdir -p universal/runtimes/osx-arm64/native

                  # Copy CPU backend (base)
                  cp artifacts/ggufx-cpu-osx-arm64/*.dylib universal/runtimes/osx-arm64/native/

                  # Copy Metal backend
                  cp artifacts/ggufx-metal-osx-arm64/*.dylib universal/runtimes/osx-arm64/native/ || echo "Metal build optional"
                  cp artifacts/ggufx-metal-osx-arm64/*.metal universal/runtimes/osx-arm64/native/ || echo "Metal shaders optional"

            - name: Show Package Contents
              run: |
                  ls -lh universal/runtimes/osx-arm64/native/
                  du -sh universal/runtimes/osx-arm64/native/

            - name: Create Checksums
              run: |
                  cd universal/runtimes/osx-arm64/native
                  shasum -a 256 * > checksums.txt
                  cat checksums.txt

            - name: Upload Universal Package
              uses: actions/upload-artifact@v4
              with:
                  name: ggufx-universal-osx-arm64
                  path: universal/
                  retention-days: 90
